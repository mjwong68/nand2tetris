// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            let x = -x;
        }
        return x;
    }

    /** Returns the remainder of x % y */
    function int mod(int x, int y) {
        var int rem;
        let rem = x;
        while (~ (rem < y)) {
            let rem = rem - y;
        }
        return rem;
    }

    /** Returns x to the power of y */
    function int pow(int x, int y) {
        var int i, sum;
        let sum = 1;
        let i = 0;
        while (i < y) {
            let sum = sum * x;
            let i = i + 1;
        }
        return sum;
    }

    function boolean bit(int x, int j) {
        return ~((x & twoToThe[j]) = 0);
    }

    function int twoToThe(int i) {
        return twoToThe[i];
    }

    /** Returns the product of x and y.
    *  When a Jack compiler detects the multiplication operator '*' in the
    *  program's code, it handles it by invoking this method. In other words,
    *  the Jack expressions x*y and multiply(x,y) return the same value.
    */
    function int multiply(int x, int y) {
        var int i, sum, shiftedX;
        let i = 0;
        let sum = 0;
        let shiftedX = x;

        while (i < 16) {
            if ( Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
    *  When a Jack compiler detects the multiplication operator '/' in the
    *  program's code, it handles it by invoking this method. In other words,
    *  the Jack expressions x/y and divide(x,y) return the same value.
    */
    function int divide(int x, int y) {
        var int q, r;
        var boolean pos;
        let pos = ((x < 0) = (y < 0));
        let x = Math.abs(x);
        let y = Math.abs(y);

        if ((y > x) | (y < 0)) {
            return 0;
        }

        let q = Math.divide(x, y + y);

        if ((x - (2 * q * y)) < y) {
            let r = q + q;
        }
        else {
            let r = q + q + 1;
        }

        if (pos) {
            return r;
        }
        else {
            return -r;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j, y, z, p;
        let y = 0;
        let j = 7;  // 16 bits / 2 - 1
        let p = Math.pow(2, j);

        while (j > -1) {
            let z = y + p;
            if ( (~((z * z) > x)) & (z * z > 0) ) {
                let y = z;
            }
            let p = p / 2;
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        else {
            return b;
        }
    }
}
